{
  "pipelineSpec": {
    "components": {
      "comp-training-comp": {
        "executorLabel": "exec-training-comp",
        "inputDefinitions": {
          "parameters": {
            "bucket_name": {
              "type": "STRING"
            },
            "data_path": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-training-comp": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "training_comp"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef training_comp(\n    bucket_name: str =\"filipegracio-haystack\",\n    data_path: str =\"data/myth/\"\n    ):\n\n    from google.cloud import storage\n    from pathlib import Path\n\n\n    from haystack.utils import convert_files_to_docs, launch_es\n    from haystack.document_stores import FAISSDocumentStore\n    from haystack.nodes import PreProcessor, EmbeddingRetriever, FARMReader\n    from haystack.pipelines import ExtractiveQAPipeline\n\n    ## AUX FUNCTIONS ##\n    def download_files(bucket_name,\n                   prefix,\n                   dl_dir):\n\n        storage_client = storage.Client()\n        bucket = storage_client.get_bucket(bucket_name)\n        blobs = bucket.list_blobs(prefix=prefix)  # Get list of files\n        for blob in blobs:\n            if blob.name.endswith(\"/\"):\n                continue\n            file_split = blob.name.split(\"/\")\n            directory = \"/\".join(file_split[0:-1])\n            Path(directory).mkdir(parents=True, exist_ok=True)\n            blob.download_to_filename(blob.name) \n\n\n\n    ## MAIN WORK ##\n    download_files(bucket_name=bucket_name, prefix=data_path, dl_dir=data_path)\n\n    launch_es()\n\n    all_docs = convert_files_to_docs(dir_path=data_path)\n\n\n    preprocessor = PreProcessor(\n        clean_empty_lines=True,\n        clean_whitespace=True,\n        clean_header_footer=False,\n        split_by=\"word\",\n        split_length=100,\n        split_respect_sentence_boundary=True,\n    )\n    docs = preprocessor.process(all_docs)\n\n    print(f\"n_files_input: {len(all_docs)}\\nn_docs_output: {len(docs)}\")\n\n    document_store = FAISSDocumentStore(faiss_index_factory_str=\"Flat\",  similarity=\"cosine\")\n\n\n    retriever = EmbeddingRetriever(\n        document_store=document_store,\n        embedding_model=\"sentence-transformers/multi-qa-mpnet-base-dot-v1\",\n        model_format=\"sentence_transformers\",\n    )\n\n\n    document_store.update_embeddings(retriever=retriever)\n\n    reader = FARMReader(model_name_or_path=\"deepset/roberta-base-squad2\", use_gpu=True)\n\n\n    extractive_pipe = ExtractiveQAPipeline(reader, retriever)\n\n    extractive_pipe.save_to_yaml(path='pipe.yaml')\n    document_store.save(\"my_faiss_index.faiss\")\n\n"
            ],
            "image": "europe-docker.pkg.dev/filipegracio-ai-learning/haystack-docker-repo/haystack-training:tag1"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "haystack-training"
    },
    "root": {
      "dag": {
        "tasks": {
          "training-comp": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-training-comp"
            },
            "inputs": {
              "parameters": {
                "bucket_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "filipegracio-haystack"
                    }
                  }
                },
                "data_path": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "data/myth/"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "training-comp"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.14"
  },
  "runtimeConfig": {}
}